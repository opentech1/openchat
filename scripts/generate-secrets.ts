#!/usr/bin/env bun

import { randomBytes } from "node:crypto";
import { existsSync, mkdirSync, writeFileSync } from "node:fs";
import { dirname, resolve } from "node:path";

const OUTPUT_PATH = resolve(process.cwd(), "docker/.env.compose");
const FORCE_FLAG = process.argv.includes("--force");

if (!FORCE_FLAG && existsSync(OUTPUT_PATH)) {
	console.error(
		`Refusing to overwrite ${OUTPUT_PATH}. Pass --force to regenerate secrets.`
	);
	process.exit(1);
}

const pgUser = "ochat_app";

const randomSecret = (bytes: number) =>
	randomBytes(bytes).toString("base64url");

const postgresPassword = randomSecret(32);
const pgProxyPassword = randomSecret(32);
const electricGatekeeperSecret = randomSecret(48);
const betterAuthSecret = randomSecret(64);

const encodedPassword = encodeURIComponent(postgresPassword);
const dbHost = process.env.DOCKER_DATABASE_HOST ?? "postgres";
const dbPort = process.env.DOCKER_DATABASE_PORT ?? "5432";
const dbName = process.env.DOCKER_DATABASE_NAME ?? "openchat";
const shadowDbName = `${dbName}_shadow`;

const databaseUrl = `postgres://${pgUser}:${encodedPassword}@${dbHost}:${dbPort}/${dbName}`;
const shadowDatabaseUrl = `postgres://${pgUser}:${encodedPassword}@${dbHost}:${dbPort}/${shadowDbName}`;

const commandHint = `bun run generate:secrets${FORCE_FLAG ? "" : " --force"}`;
const fileContents = `# Autogenerated by scripts/generate-secrets.ts
# Run "${commandHint}" to refresh.
POSTGRES_USER=${pgUser}
POSTGRES_PASSWORD=${postgresPassword}
POSTGRES_DB=${dbName}
DATABASE_URL=${databaseUrl}
SHADOW_DATABASE_URL=${shadowDatabaseUrl}
PG_PROXY_PASSWORD=${pgProxyPassword}
ELECTRIC__PG_PROXY__PASSWORD=${pgProxyPassword}
ELECTRIC_GATEKEEPER_SECRET=${electricGatekeeperSecret}
BETTER_AUTH_SECRET=${betterAuthSecret}
`;

mkdirSync(dirname(OUTPUT_PATH), { recursive: true });
writeFileSync(OUTPUT_PATH, fileContents, { encoding: "utf8" });

console.log(`âœ… Wrote secrets to ${OUTPUT_PATH}`);
